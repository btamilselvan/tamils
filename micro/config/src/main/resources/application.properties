server.port=8888
#spring.cloud.config.server.native.searchLocations=file://${user.home}/MicroService/centralProperties/
#SPRING_PROFILES_ACTIVE=native
#need to enable native profile if git configuration is not used.
spring.profiles.active=native
spring.application.name=config
spring.cloud.config.server.native.searchLocations=classpath:/config

#The config clients should use this credentials to lookup config server
spring.security.user.name=guest
spring.security.user.password=can0n1947

#The parameters stored in the properties file can be encrypted using spring config encrypt/decrypt end-points.
#These end-points are enabled by defaults and supports both symmetric and asymmetric encryption. To enable symmetric
#encryptions just set the below property. 
#Make sure to disable csrf for /encrypt and /decrypt end-points
#Encrypted values are prefixed with the string {cipher} and can be generated by an REST-call to the path 
#/encrypt', if the server is configured to use a symmetric key or a key pair.
#The properties will be automatically decrypted when queried by config clients
encrypt.key=S0meK$y*7b12